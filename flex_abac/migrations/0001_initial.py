# Generated by Django 2.2.12 on 2021-09-08 08:46

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import jsonfield.fields
import picklefield.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('contenttypes', '0002_remove_content_type_name'),
    ]

    operations = [
        migrations.CreateModel(
            name='Action',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('pretty_name', models.CharField(blank=True, max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='BaseAttribute',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('field_name', models.CharField(max_length=512)),
                ('serializer', models.CharField(blank=True, default='flex_abac.serializers.default.BaseValuesSerializer', max_length=512, null=True)),
                ('extra_fields', jsonfield.fields.JSONField(null=True)),
                ('polymorphic_ctype', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='polymorphic_flex_abac.baseattribute_set+', to='contenttypes.ContentType')),
            ],
            options={
                'verbose_name': 'Attribute',
                'verbose_name_plural': 'Attributes',
            },
        ),
        migrations.CreateModel(
            name='BaseFilter',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('polymorphic_ctype', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='polymorphic_flex_abac.basefilter_set+', to='contenttypes.ContentType')),
            ],
            options={
                'abstract': False,
                'base_manager_name': 'objects',
            },
        ),
        migrations.CreateModel(
            name='Policy',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
            ],
            options={
                'verbose_name': 'Policy',
                'verbose_name_plural': 'Policies',
            },
        ),
        migrations.CreateModel(
            name='Role',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='CategoricalAttribute',
            fields=[
                ('baseattribute_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='flex_abac.BaseAttribute')),
            ],
            options={
                'abstract': False,
                'base_manager_name': 'objects',
            },
            bases=('flex_abac.baseattribute',),
        ),
        migrations.CreateModel(
            name='CategoricalFilter',
            fields=[
                ('basefilter_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='flex_abac.BaseFilter')),
                ('value', picklefield.fields.PickledObjectField(editable=False)),
                ('attribute_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='values', to='flex_abac.CategoricalAttribute')),
            ],
            options={
                'abstract': False,
                'base_manager_name': 'objects',
            },
            bases=('flex_abac.basefilter',),
        ),
        migrations.CreateModel(
            name='GenericAttribute',
            fields=[
                ('baseattribute_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='flex_abac.BaseAttribute')),
            ],
            options={
                'abstract': False,
                'base_manager_name': 'objects',
            },
            bases=('flex_abac.baseattribute',),
        ),
        migrations.CreateModel(
            name='GenericFilter',
            fields=[
                ('basefilter_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='flex_abac.BaseFilter')),
                ('value', picklefield.fields.PickledObjectField(editable=False)),
                ('attribute_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='values', to='flex_abac.GenericAttribute')),
            ],
            options={
                'abstract': False,
                'base_manager_name': 'objects',
            },
            bases=('flex_abac.basefilter',),
        ),
        migrations.CreateModel(
            name='MaterializedNestedCategoricalAttribute',
            fields=[
                ('baseattribute_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='flex_abac.BaseAttribute')),
                ('path', models.CharField(max_length=255, unique=True)),
                ('depth', models.PositiveIntegerField()),
                ('numchild', models.PositiveIntegerField(default=0)),
            ],
            options={
                'abstract': False,
                'base_manager_name': 'objects',
            },
            bases=('flex_abac.baseattribute', models.Model),
        ),
        migrations.CreateModel(
            name='MaterializedNestedCategoricalFilter',
            fields=[
                ('basefilter_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='flex_abac.BaseFilter')),
                ('path', models.CharField(max_length=255, unique=True)),
                ('depth', models.PositiveIntegerField()),
                ('numchild', models.PositiveIntegerField(default=0)),
                ('value', models.CharField(max_length=100)),
                ('attribute_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='values', to='flex_abac.MaterializedNestedCategoricalAttribute')),
            ],
            options={
                'verbose_name': 'Materialized Nested Categorical Filter',
                'verbose_name_plural': 'Materialized Nested Categorical Filters',
            },
            bases=('flex_abac.basefilter', models.Model),
        ),
        migrations.CreateModel(
            name='NestedCategoricalAttribute',
            fields=[
                ('baseattribute_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='flex_abac.BaseAttribute')),
                ('nested_field_name', models.CharField(max_length=512)),
                ('parent_field_name', models.CharField(max_length=512)),
                ('field_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contenttypes.ContentType')),
            ],
            options={
                'abstract': False,
                'base_manager_name': 'objects',
            },
            bases=('flex_abac.baseattribute',),
        ),
        migrations.CreateModel(
            name='NestedCategoricalFilter',
            fields=[
                ('basefilter_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='flex_abac.BaseFilter')),
                ('value', picklefield.fields.PickledObjectField(editable=False)),
                ('attribute_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='values', to='flex_abac.NestedCategoricalAttribute')),
            ],
            options={
                'abstract': False,
                'base_manager_name': 'objects',
            },
            bases=('flex_abac.basefilter',),
        ),
        migrations.CreateModel(
            name='UserRole',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('role', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='flex_abac.Role')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'unique_together': {('user', 'role')},
            },
        ),
        migrations.CreateModel(
            name='RolePolicy',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('policy', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='flex_abac.Policy')),
                ('role', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='flex_abac.Role')),
            ],
            options={
                'unique_together': {('role', 'policy')},
            },
        ),
        migrations.AddField(
            model_name='role',
            name='policies',
            field=models.ManyToManyField(through='flex_abac.RolePolicy', to='flex_abac.Policy'),
        ),
        migrations.AddField(
            model_name='role',
            name='users',
            field=models.ManyToManyField(through='flex_abac.UserRole', to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='PolicyAction',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('action', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='flex_abac.Action')),
                ('policy', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='flex_abac.Policy')),
            ],
            options={
                'unique_together': {('policy', 'action')},
            },
        ),
        migrations.AddField(
            model_name='policy',
            name='actions',
            field=models.ManyToManyField(through='flex_abac.PolicyAction', to='flex_abac.Action'),
        ),
        migrations.AddField(
            model_name='policy',
            name='roles',
            field=models.ManyToManyField(through='flex_abac.RolePolicy', to='flex_abac.Role'),
        ),
        migrations.CreateModel(
            name='ActionModel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('action', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='flex_abac.Action')),
                ('content_type', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='contenttypes.ContentType')),
            ],
            options={
                'unique_together': {('action', 'content_type')},
            },
        ),
        migrations.AddField(
            model_name='action',
            name='models',
            field=models.ManyToManyField(through='flex_abac.ActionModel', to='contenttypes.ContentType'),
        ),
        migrations.AddField(
            model_name='action',
            name='policies',
            field=models.ManyToManyField(through='flex_abac.PolicyAction', to='flex_abac.Policy'),
        ),
        migrations.CreateModel(
            name='PolicyNestedCategoricalFilter',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('policy', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='flex_abac.Policy')),
                ('value', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='flex_abac.NestedCategoricalFilter')),
            ],
            options={
                'abstract': False,
                'unique_together': {('value', 'policy')},
            },
        ),
        migrations.CreateModel(
            name='PolicyMaterializedNestedCategoricalFilter',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('policy', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='flex_abac.Policy')),
                ('value', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='flex_abac.MaterializedNestedCategoricalFilter')),
            ],
            options={
                'abstract': False,
                'unique_together': {('value', 'policy')},
            },
        ),
        migrations.CreateModel(
            name='PolicyGenericFilter',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('policy', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='flex_abac.Policy')),
                ('value', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='flex_abac.GenericFilter')),
            ],
            options={
                'abstract': False,
                'unique_together': {('value', 'policy')},
            },
        ),
        migrations.CreateModel(
            name='PolicyCategoricalFilter',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('policy', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='flex_abac.Policy')),
                ('value', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='flex_abac.CategoricalFilter')),
            ],
            options={
                'abstract': False,
                'unique_together': {('value', 'policy')},
            },
        ),
        migrations.AddField(
            model_name='nestedcategoricalfilter',
            name='policies',
            field=models.ManyToManyField(through='flex_abac.PolicyNestedCategoricalFilter', to='flex_abac.Policy'),
        ),
        migrations.CreateModel(
            name='ModelNestedCategoricalAttribute',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('owner_object_id', models.PositiveIntegerField(null=True)),
                ('owner_content_type', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='contenttypes.ContentType')),
                ('attribute_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='flex_abac.NestedCategoricalAttribute')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ModelMaterializedNestedCategoricalAttribute',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('owner_object_id', models.PositiveIntegerField(null=True)),
                ('owner_content_type', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='contenttypes.ContentType')),
                ('attribute_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='flex_abac.MaterializedNestedCategoricalAttribute')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ModelGenericAttribute',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('owner_object_id', models.PositiveIntegerField(null=True)),
                ('owner_content_type', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='contenttypes.ContentType')),
                ('attribute_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='flex_abac.GenericAttribute')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ModelCategoricalAttribute',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('owner_object_id', models.PositiveIntegerField(null=True)),
                ('owner_content_type', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='contenttypes.ContentType')),
                ('attribute_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='flex_abac.CategoricalAttribute')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='materializednestedcategoricalfilter',
            name='policies',
            field=models.ManyToManyField(through='flex_abac.PolicyMaterializedNestedCategoricalFilter', to='flex_abac.Policy'),
        ),
        migrations.CreateModel(
            name='ItemMaterializedNestedCategoricalFilter',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('owner_object_id', models.PositiveIntegerField(null=True)),
                ('owner_content_type', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='contenttypes.ContentType')),
                ('value', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='flex_abac.MaterializedNestedCategoricalFilter')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='genericfilter',
            name='policies',
            field=models.ManyToManyField(through='flex_abac.PolicyGenericFilter', to='flex_abac.Policy'),
        ),
        migrations.AddField(
            model_name='categoricalfilter',
            name='policies',
            field=models.ManyToManyField(through='flex_abac.PolicyCategoricalFilter', to='flex_abac.Policy'),
        ),
    ]
